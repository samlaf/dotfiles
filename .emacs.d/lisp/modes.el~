;;; modes.el --- configuration for 100-odd emacs modes



;;-------------------- D MODE --------------------;;
(autoload 'dtrace-script-mode "dtrace-script-mode" () t)
(add-to-list 'auto-mode-alist '("\\.d\\'" . dtrace-script-mode))

;;-------------------- C mode --------------------;;
(add-hook 'c-mode-hook (lambda () (c-toggle-hungry-state 1)))
(add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)

;;--------------- python shell---------------;;
(setenv "LC_CTYPE" "UTF-8")    ;otherwise python-shell uses ASCII by default


;;----------------GNUS-----------------;;
(add-hook 'message-mode-hook
          '(lambda ()
             (bbdb-initialize 'message)
             (bbdb-initialize 'gnus)
             (local-set-key "<TAB>" 'bbdb-complete-name)))

(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

;;----------------ORG MODE-------------;;
(load-library "org-config")

;;----------------HASKELL MODE----------------;;

(add-hook 'haskell-mode-hook 'haskell-indentation-mode)
(add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)

(eval-after-load "haskell-mode"
		 '(progn
		   (define-key haskell-mode-map (kbd "C-x C-d") nil)
		   (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
		   (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-file)
		   (define-key haskell-mode-map (kbd "C-c C-b") 'haskell-interactive-switch)
		   (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
		   (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
		   (define-key haskell-mode-map (kbd "C-c M-.") nil)
		   (define-key haskell-mode-map (kbd "C-c C-d") nil)
		   (define-key haskell-mode-map (kbd "C-,") 'haskell-move-nested-left)
		   (define-key haskell-mode-map (kbd "C-.") 'haskell-move-nested-right)))

;;--------------- SLIME ---------------;;
;; Replace "sbcl" with the path to your implementation
;; Never changed "sbcl"... does it work anyhow?!?
(setq inferior-lisp-program "sbcl")

;;Winner mode (record changes in window configurations)
(winner-mode)

(electric-pair-mode 1)
(show-paren-mode 1)

;;-------------------- js-comint --------------------;;
;; This is a recent version (not the one from packages)
;; that fixes bugs with node REPL (cloned from github)

(add-to-list 'load-path "~/.emacs.d/site-lisp/js-comint")
(require 'js-comint)
(setenv "NODE_NO_READLINE" "1")		;This takes care of the prompt
					;problem in node
(add-hook 'js2-mode-hook '(lambda ()
			    (local-set-key "\C-x\C-e" 'js-send-last-sexp)
			    (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
			    (local-set-key "\C-cb" 'js-send-buffer)
			    (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
			    (local-set-key "\C-cl" 'js-load-file-and-go)
			    ))




;;-------------------- js2-mode --------------------;;
(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))




;;-------------------- AUCTEX --------------------;;
(setq TeX-auto-save t)
(setq TeX-parse-self t)

;; In Info, they say to add this to 'Info-directory-list, but it
;; didn't seem to work. Adding to 'Info-additional-directory-list
;; fixes this.
(eval-after-load 'info
		 '(add-to-list 'Info-additional-directory-list "/Users/samlaf/.emacs.d/elpa/auctex-11.89/"))


;;-------------------- INFO --------------------;;

;; This is just a hack for when packages' dir file (like Auctex)
;; seem not to work properly. Just copy their .info files to ~/info/
;; and then put links to these files in ~/info/dir
;; However I fixed this by using 'Info-additional-directory-list (see
;; AUCTEX above). So this can be used for additional info files.
(setq Info-default-directory-list
      (append Info-default-directory-list
	      '("~/info")))


;;-------------------- SCHEME --------------------;;
(setenv "MITSCHEME_LIBRARY_PATH"
	"/Applications/mit-scheme.app/Contents/Resources")

;; scheme-complete package
;; [[file:~/.emacs.d/elpa/scheme-complete-readme.txt]]

(autoload 'scheme-smart-complete "scheme-complete" nil t)
(eval-after-load 'scheme
		 '(define-key scheme-mode-map "\t" 'scheme-complete-or-indent))

(autoload 'scheme-get-current-symbol-info "scheme-complete" nil t)
(add-hook 'scheme-mode-hook
	  (lambda ()
	    (make-local-variable 'eldoc-documentation-function)
	    (setq eldoc-documentation-function 'scheme-get-current-symbol-info)
	    (eldoc-mode)
	    (yas-minor-mode -1)))	;otherwise yas' keymap takes
					;precedence over scheme's so
					;we can't rebind <TAB>

;;-------------------- GAMBIT / JAZZ --------------------;;
(add-to-list 'auto-mode-alist '("\\.jazz\\'" . scheme-mode))

;;-------------------- quack --------------------;;
;; mode for scheme
(require 'quack)

;;-------------------- TERM --------------------;;
;; yas behaves badly with term and makes tab-completion unavailable.
(add-hook 'term-mode-hook
	  (lambda () (yas-minor-mode -1)))

;;-------------------- ELPY (python) --------------------;;
(elpy-enable)

;;-------------------- doc-view-mode --------------------;;
;; Taken from
;; https://tex.stackexchange.com/questions/177014/compile-with-emacs-and-update-the-view-in-docview
;; This way DocView will auto-update viewer when pdf file changes
;; (used for previewing latex in a different window)
(add-hook 'doc-view-mode-hook 'auto-revert-mode)

;;-------------------- typer (ift-6232) --------------------;;
(add-to-list 'auto-mode-alist '("\\.typer\\'" . typer-mode))
(autoload 'typer-mode "/Users/samlaf/udm/compiler/tp2/typer/emacs/typer-mode.el")

;;-------------------- MATLAB/OCTAVE --------------------;;
(add-to-list 'auto-mode-alist '("\\.m\\'" . matlab-mode))

;;-------------------- PROLOG --------------------;;
(require 'ediprolog)
(global-set-key [f10] 'ediprolog-dwim)

;;; modes.el ends here

